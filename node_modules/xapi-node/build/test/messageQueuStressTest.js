"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const XAPI_1 = require("../core/XAPI");
const __1 = require("..");
const logger4_1 = require("logger4");
const path = require("path");
const __2 = require("..");
process
    .on('unhandledRejection', (reason, p) => {
    console.error(reason, 'Unhandled Rejection at Promise', p);
})
    .on('uncaughtException', err => {
    console.error(err, 'Uncaught Exception thrown');
    process.exit(1);
});
function messageQueuStressTest(jsonPath) {
    try {
        const login = __1.parseLogin(jsonPath);
        const logger = new logger4_1.default({ path: path.join(process.cwd(), 'logs', 'xapi'), directorySizeLimitMB: null });
        const x = new XAPI_1.XAPI(Object.assign(Object.assign({}, login), { logger }));
        x.connect();
        let start = null;
        let received = 0;
        x.onReady(() => {
            start = new __2.Time();
            console.log('Test: started.');
            for (let i = 0; i < 150; i++) {
                x.Socket.send.getVersion();
            }
            setTimeout(() => {
                if (received !== 150) {
                    console.error('Test: failed');
                    process.exit(1);
                }
                else {
                    console.log('Test: successful');
                    process.exit(0);
                }
            }, 40000);
        });
        x.Socket.listen.getVersion((returnData) => {
            var _a;
            received += 1;
            if (received === 150) {
                console.log('Test: 150. message arrived in ' + ((_a = start) === null || _a === void 0 ? void 0 : _a.elapsedMs()) + 'ms');
            }
        });
    }
    catch (e) {
        console.error(e);
        process.exit(1);
    }
}
exports.messageQueuStressTest = messageQueuStressTest;
//# sourceMappingURL=messageQueuStressTest.js.map