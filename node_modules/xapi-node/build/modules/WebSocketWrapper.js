"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Listener_1 = require("./Listener");
class WebSocketWrapper extends Listener_1.Listener {
    constructor(url) {
        super();
        this.ws = null;
        this._status = false;
        if (typeof window === 'undefined' && typeof module !== 'undefined' && module.exports) {
            const WebSocketClient = require('ws');
            this.ws = new WebSocketClient(url);
            this.ws.on('open', () => {
                this._status = true;
                this.callListener('ws_open');
            });
            this.ws.on('close', () => {
                this._status = false;
                this.callListener('ws_close');
            });
            this.ws.on('message', (message) => {
                this.callListener('ws_message', [message]);
            });
            this.ws.on('error', (error) => {
                this.callListener('ws_error', [error]);
            });
        }
        else {
            this.ws = new WebSocket(url);
            this.ws.onopen = () => {
                if (this._status === false) {
                    this._status = true;
                    this.callListener('ws_statusChange', [true]);
                }
                this.callListener('ws_open');
            };
            this.ws.onclose = () => {
                if (this._status) {
                    this._status = false;
                    this.callListener('ws_statusChange', [false]);
                }
                this.callListener('ws_close');
            };
            this.ws.onmessage = (event) => {
                this.callListener('ws_message', [event.data]);
            };
            this.ws.onerror = (error) => {
                this.callListener('ws_error', [error]);
            };
        }
    }
    get status() {
        return this._status;
    }
    onStatusChange(callback) {
        this.addListener('ws_statusChange', callback);
    }
    onOpen(callback) {
        this.addListener('ws_open', callback);
    }
    onMessage(callback) {
        this.addListener('ws_message', callback);
    }
    onError(callback) {
        this.addListener('ws_error', callback);
    }
    onClose(callback) {
        this.addListener('ws_close', callback);
    }
    send(data) {
        this.ws.send(data);
    }
    close() {
        this.ws.close();
    }
}
exports.WebSocketWrapper = WebSocketWrapper;
//# sourceMappingURL=WebSocketWrapper.js.map